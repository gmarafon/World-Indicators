<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1010.1014                               -->
<workbook original-version='18.1' source-build='2024.3.0 (20243.24.1010.1014)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SingleValuePerNestSorting />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='dbt_world_indicators_marts_fact_world_indicators.csv+ (Multiple Connections)' inline='true' name='federated.0ms0mev0vhknxx14yggaw07l98bd' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='dbt_world_indicators_marts_fact_world_indicators' name='cloudfile:googledrive-textscan.1cjab4p0tccuhx189hg480v932tx'>
            <connection class='cloudfile:googledrive-textscan' cloudFileExtension='csv' cloudFileId='1f-vRzgJ3WzJEA303-oIDwGoxo2xy9CTb' cloudFileMetadata_-_folder='15x7ve7m3U2gUq-MmHBdT2M250zhGNv_Y' cloudFileName='dbt_world_indicators_marts_fact_world_indicators.csv' cloudFileProvider='googledrive' cloudFileRequestURL='https://www.googleapis.com/drive/v3/files/1f-vRzgJ3WzJEA303-oIDwGoxo2xy9CTb?alt=media' filename='dbt_world_indicators_marts_fact_world_indicators.csv' server='' server-oauth='' username='gfmarafon@gmail.com' />
          </named-connection>
          <named-connection caption='dbt_world_indicators_marts_dimension_series' name='cloudfile:googledrive-textscan.1slq9f11i0m00018dn2ai15ucjzb'>
            <connection class='cloudfile:googledrive-textscan' cloudFileExtension='csv' cloudFileId='1HeUqHY_XnXW9g0lFvGkBnD6lfBOMOo_1' cloudFileMetadata_-_folder='15x7ve7m3U2gUq-MmHBdT2M250zhGNv_Y' cloudFileName='dbt_world_indicators_marts_dimension_series.csv' cloudFileProvider='googledrive' cloudFileRequestURL='https://www.googleapis.com/drive/v3/files/1HeUqHY_XnXW9g0lFvGkBnD6lfBOMOo_1?alt=media' filename='dbt_world_indicators_marts_dimension_series.csv' server='' server-oauth='' username='gfmarafon@gmail.com' />
          </named-connection>
          <named-connection caption='dbt_world_indicators_marts_dimension_countries' name='cloudfile:googledrive-textscan.0zklunl1nulx991cu3fn814pwgxr'>
            <connection class='cloudfile:googledrive-textscan' cloudFileExtension='csv' cloudFileId='1JCWuM-ZQiUQd3_troHp9ke8fIUsoXaXi' cloudFileMetadata_-_folder='15x7ve7m3U2gUq-MmHBdT2M250zhGNv_Y' cloudFileName='dbt_world_indicators_marts_dimension_countries.csv' cloudFileProvider='googledrive' cloudFileRequestURL='https://www.googleapis.com/drive/v3/files/1JCWuM-ZQiUQd3_troHp9ke8fIUsoXaXi?alt=media' filename='dbt_world_indicators_marts_dimension_countries.csv' server='' server-oauth='' username='gfmarafon@gmail.com' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='cloudfile:googledrive-textscan.1cjab4p0tccuhx189hg480v932tx' name='dbt_world_indicators_marts_fact_world_indicators.csv' table='[dbt_world_indicators_marts_fact_world_indicators#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
              <column datatype='string' name='Economy ID' ordinal='0' />
              <column datatype='string' name='Series ID' ordinal='1' />
              <column datatype='integer' name='Year' ordinal='2' />
              <column datatype='string' name='Value' ordinal='3' />
            </columns>
          </relation>
          <relation connection='cloudfile:googledrive-textscan.0zklunl1nulx991cu3fn814pwgxr' name='dbt_world_indicators_marts_dimension_countries.csv' table='[dbt_world_indicators_marts_dimension_countries#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Economy ID' ordinal='1' />
            </columns>
          </relation>
          <relation connection='cloudfile:googledrive-textscan.1slq9f11i0m00018dn2ai15ucjzb' name='dbt_world_indicators_marts_dimension_series.csv' table='[dbt_world_indicators_marts_dimension_series#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
              <column datatype='string' name='Series' ordinal='0' />
              <column datatype='string' name='Series ID' ordinal='1' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[Country]' value='[dbt_world_indicators_marts_dimension_countries.csv].[Country]' />
          <map key='[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]' value='[dbt_world_indicators_marts_dimension_countries.csv].[Economy ID]' />
          <map key='[Economy ID]' value='[dbt_world_indicators_marts_fact_world_indicators.csv].[Economy ID]' />
          <map key='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' value='[dbt_world_indicators_marts_dimension_series.csv].[Series ID]' />
          <map key='[Series ID]' value='[dbt_world_indicators_marts_fact_world_indicators.csv].[Series ID]' />
          <map key='[Series]' value='[dbt_world_indicators_marts_dimension_series.csv].[Series]' />
          <map key='[Value]' value='[dbt_world_indicators_marts_fact_world_indicators.csv].[Value]' />
          <map key='[Year]' value='[dbt_world_indicators_marts_fact_world_indicators.csv].[Year]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;R$&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[dbt_world_indicators_marts_dimension_countries.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;R$&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[dbt_world_indicators_marts_dimension_series.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;R$&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;pt_BR&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Economy ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Economy ID]</local-name>
            <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv]</parent-name>
            <remote-alias>Economy ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Series ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Series ID]</local-name>
            <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv]</parent-name>
            <remote-alias>Series ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Year]</local-name>
            <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv]</parent-name>
            <remote-alias>Year</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Value</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Value]</local-name>
            <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv]</parent-name>
            <remote-alias>Value</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[dbt_world_indicators_marts_dimension_countries.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Economy ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]</local-name>
            <parent-name>[dbt_world_indicators_marts_dimension_countries.csv]</parent-name>
            <remote-alias>Economy ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Series</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Series]</local-name>
            <parent-name>[dbt_world_indicators_marts_dimension_series.csv]</parent-name>
            <remote-alias>Series</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Series ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Series ID (dbt_world_indicators_marts_dimension_series.csv)]</local-name>
            <parent-name>[dbt_world_indicators_marts_dimension_series.csv]</parent-name>
            <remote-alias>Series ID</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LPT_RBR' />
            <object-id>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='DIM_Economy ID' datatype='string' name='[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]' role='dimension' type='nominal' />
      <column caption='DIM_Series ID' datatype='string' name='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' role='dimension' type='nominal' />
      <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Value]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
      <column caption='dbt_world_indicators_marts_dimension_countries.csv' datatype='table' name='[__tableau_internal_object_id__].[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]' role='measure' type='quantitative' />
      <column caption='dbt_world_indicators_marts_dimension_series.csv' datatype='table' name='[__tableau_internal_object_id__].[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]' role='measure' type='quantitative' />
      <column caption='dbt_world_indicators_marts_fact_world_indicators.csv' datatype='table' name='[__tableau_internal_object_id__].[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]' role='measure' type='quantitative' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/gfmar/AppData/Local/Temp/TableauTemp/#TableauTemp_07ohufo0xpd7h810hjgt30ycpkwx.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='01/09/2025 05:39:48 PM' username='tableau_internal_user'>
          <relation type='collection'>
            <relation name='dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C' table='[Extract].[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]' type='table' />
            <relation name='dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150' table='[Extract].[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]' type='table' />
            <relation name='dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3' table='[Extract].[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]' type='table' />
          </relation>
          <cols>
            <map key='[Country]' value='[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150].[Country]' />
            <map key='[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]' value='[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150].[Economy ID]' />
            <map key='[Economy ID]' value='[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C].[Economy ID]' />
            <map key='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' value='[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3].[Series ID]' />
            <map key='[Series ID]' value='[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C].[Series ID]' />
            <map key='[Series]' value='[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3].[Series]' />
            <map key='[Value]' value='[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C].[Value]' />
            <map key='[Year]' value='[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C].[Year]' />
          </cols>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Economy ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Economy ID]</local-name>
              <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</parent-name>
              <remote-alias>Economy ID</remote-alias>
              <ordinal>0</ordinal>
              <family>dbt_world_indicators_marts_fact_world_indicators.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>265</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Series ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Series ID]</local-name>
              <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</parent-name>
              <remote-alias>Series ID</remote-alias>
              <ordinal>1</ordinal>
              <family>dbt_world_indicators_marts_fact_world_indicators.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2547</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Year]</local-name>
              <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</parent-name>
              <remote-alias>Year</remote-alias>
              <ordinal>2</ordinal>
              <family>dbt_world_indicators_marts_fact_world_indicators.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>10</approx-count>
              <contains-null>true</contains-null>
              <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Value</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Value]</local-name>
              <parent-name>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</parent-name>
              <remote-alias>Value</remote-alias>
              <ordinal>3</ordinal>
              <family>dbt_world_indicators_marts_fact_world_indicators.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>543480</approx-count>
              <contains-null>true</contains-null>
              <object-id>[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>4</ordinal>
              <family>dbt_world_indicators_marts_dimension_countries.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>266</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Economy ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]</local-name>
              <parent-name>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</parent-name>
              <remote-alias>Economy ID</remote-alias>
              <ordinal>5</ordinal>
              <family>dbt_world_indicators_marts_dimension_countries.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>266</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Series</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Series]</local-name>
              <parent-name>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</parent-name>
              <remote-alias>Series</remote-alias>
              <ordinal>6</ordinal>
              <family>dbt_world_indicators_marts_dimension_series.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1496</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Series ID</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Series ID (dbt_world_indicators_marts_dimension_series.csv)]</local-name>
              <parent-name>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</parent-name>
              <remote-alias>Series ID</remote-alias>
              <ordinal>7</ordinal>
              <family>dbt_world_indicators_marts_dimension_series.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>1496</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LPT_RBR' />
              <object-id>[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Brazil&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='dbt_world_indicators_marts_dimension_countries.csv' id='dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150'>
            <properties context=''>
              <relation connection='cloudfile:googledrive-textscan.0zklunl1nulx991cu3fn814pwgxr' name='dbt_world_indicators_marts_dimension_countries.csv' table='[dbt_world_indicators_marts_dimension_countries#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
                  <column datatype='string' name='Country' ordinal='0' />
                  <column datatype='string' name='Economy ID' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150' table='[Extract].[dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150]' type='table' />
            </properties>
          </object>
          <object caption='dbt_world_indicators_marts_dimension_series.csv' id='dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3'>
            <properties context=''>
              <relation connection='cloudfile:googledrive-textscan.1slq9f11i0m00018dn2ai15ucjzb' name='dbt_world_indicators_marts_dimension_series.csv' table='[dbt_world_indicators_marts_dimension_series#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
                  <column datatype='string' name='Series' ordinal='0' />
                  <column datatype='string' name='Series ID' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3' table='[Extract].[dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3]' type='table' />
            </properties>
          </object>
          <object caption='dbt_world_indicators_marts_fact_world_indicators.csv' id='dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C'>
            <properties context=''>
              <relation connection='cloudfile:googledrive-textscan.1cjab4p0tccuhx189hg480v932tx' name='dbt_world_indicators_marts_fact_world_indicators.csv' table='[dbt_world_indicators_marts_fact_world_indicators#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='pt_BR' separator=';'>
                  <column datatype='string' name='Economy ID' ordinal='0' />
                  <column datatype='string' name='Series ID' ordinal='1' />
                  <column datatype='integer' name='Year' ordinal='2' />
                  <column datatype='string' name='Value' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C' table='[Extract].[dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Economy ID]' />
              <expression op='[Economy ID (dbt_world_indicators_marts_dimension_countries.csv)]' />
            </expression>
            <first-end-point object-id='dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C' />
            <second-end-point object-id='dbt_world_indicators_marts_dimension_countries.csv_9258EA96A8DD47F8B30B2F7815E1A150' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Series ID]' />
              <expression op='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' />
            </expression>
            <first-end-point object-id='dbt_world_indicators_marts_fact_world_indicators.csv_6648310D045241A8BB46C7A05BFCE23C' />
            <second-end-point object-id='dbt_world_indicators_marts_dimension_series.csv_8BC32F0C64AB4B99B8D02C062F7CC8D3' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Indicator Map</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='dbt_world_indicators_marts_fact_world_indicators.csv+ (Multiple Connections)' name='federated.0ms0mev0vhknxx14yggaw07l98bd' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0ms0mev0vhknxx14yggaw07l98bd'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Series]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Value]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Year]' role='dimension' type='quantitative' />
            <column-instance column='[Value]' derivation='CountD' name='[ctd:Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Series]' derivation='None' name='[none:Series:nk]' pivot='key' type='nominal' />
            <column-instance column='[Year]' derivation='None' name='[none:Year:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Africa Eastern and Southern&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Africa Western and Central&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Albania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;American Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Andorra&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Arab World&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Armenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Aruba&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas, The&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahrain&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bermuda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;British Virgin Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei Darussalam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burkina Faso&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cabo Verde&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cameroon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Caribbean small states&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cayman Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central Europe and the Baltics&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Channel Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo, Dem. Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cote d&apos;Ivoire&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Croatia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Curacao&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czechia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominican Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Early-demographic dividend&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;East Asia &amp; Pacific&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;East Asia &amp; Pacific (excluding high income)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;East Asia &amp; Pacific (IDA &amp; IBRD countries)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt, Arab Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Equatorial Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eswatini&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Euro area&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Europe &amp; Central Asia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Europe &amp; Central Asia (excluding high income)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Europe &amp; Central Asia (IDA &amp; IBRD countries)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;European Union&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Faroe Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fragile and conflict affected situations&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;French Polynesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gambia, The&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gibraltar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greenland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guyana&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Heavily indebted poor countries (HIPC)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;High income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;IBRD only&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;IDA &amp; IBRD total&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;IDA blend&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;IDA only&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;IDA total&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran, Islamic Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Isle of Man&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kazakhstan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea, Dem. People&apos;s Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Korea, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kosovo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyz Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lao PDR&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Late-demographic dividend&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latin America &amp; Caribbean&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latin America &amp; Caribbean (excluding high income)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latin America &amp; the Caribbean (IDA &amp; IBRD countries)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Least developed countries: UN classification&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liechtenstein&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Low &amp; middle income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Low income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lower middle income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Macao SAR, China&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malawi&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malta&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritius&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia, Fed. Sts.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Middle East &amp; North Africa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Middle East &amp; North Africa (excluding high income)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Middle East &amp; North Africa (IDA &amp; IBRD countries)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Middle income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Monaco&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Namibia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nauru&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Caledonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;North America&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;North Macedonia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Northern Mariana Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;OECD members&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Oman&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Other small states&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pacific island small states&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Post-demographic dividend&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pre-demographic dividend&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Puerto Rico&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russian Federation&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;San Marino&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sao Tome and Principe&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Senegal&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sint Maarten (Dutch part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovak Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Small states&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Somalia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Asia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Asia (IDA &amp; IBRD)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Kitts and Nevis&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Lucia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Martin (French part)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;St. Vincent and the Grenadines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sub-Saharan Africa&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sub-Saharan Africa (excluding high income)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sub-Saharan Africa (IDA &amp; IBRD countries)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sudan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Syrian Arab Republic&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tonga&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkiye&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turks and Caicos Islands&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tuvalu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uganda&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Upper middle income&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela, RB&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Viet Nam&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Virgin Islands (U.S.)&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;West Bank and Gaza&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen, Rep.&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]'>
            <groupfilter count='1' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([Series])' function='order' user:ui-marker='order'>
                <groupfilter function='member' level='[none:Series:nk]' member='&quot;Inflation, consumer prices (annual \%)&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Year:qk]' included-values='in-range'>
            <min>2023</min>
            <max>2023</max>
          </filter>
          <slices>
            <column>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Country:nk]</column>
            <column>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]</column>
            <column>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Year:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ms0mev0vhknxx14yggaw07l98bd].[Longitude (generated)]' field-type='quantitative' max='22005768.689249828' min='-10895921.286415983' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0ms0mev0vhknxx14yggaw07l98bd].[Latitude (generated)]' field-type='quantitative' max='18212726.223941963' min='-12425734.331433449' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[ctd:Value:qk]' />
              <lod column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Country:nk]' />
              <geometry column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minheight' value='699' />
                <format attr='maxheight' value='699' />
                <format attr='minwidth' value='1023' />
                <format attr='maxwidth' value='1023' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ms0mev0vhknxx14yggaw07l98bd].[Latitude (generated)]</rows>
        <cols>[federated.0ms0mev0vhknxx14yggaw07l98bd].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{A0CE3B1E-A6CE-4E6C-96B6-482A90FCD070}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='dbt_world_indicators_marts_fact_world_indicators.csv+ (Multiple Connections)' name='federated.0ms0mev0vhknxx14yggaw07l98bd' />
          </datasources>
          <datasource-dependencies datasource='federated.0ms0mev0vhknxx14yggaw07l98bd'>
            <column caption='DIM_Series ID' datatype='string' name='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' role='dimension' type='nominal' />
            <column datatype='string' name='[Series]' role='dimension' type='nominal' />
            <column aggregation='CountD' datatype='real' datatype-customized='true' name='[Value]' role='measure' type='quantitative' />
            <column-instance column='[Value]' derivation='Max' name='[max:Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Series ID (dbt_world_indicators_marts_dimension_series.csv)]' derivation='None' name='[none:Series ID (dbt_world_indicators_marts_dimension_series.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[Series]' derivation='None' name='[none:Series:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <single-value-per-nest-shelf-sorts>
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series ID (dbt_world_indicators_marts_dimension_series.csv):nk]' direction='ASC' measure-to-sort-by='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series ID (dbt_world_indicators_marts_dimension_series.csv):nk]' shelf='rows' />
          </single-value-per-nest-shelf-sorts>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.0ms0mev0vhknxx14yggaw07l98bd].[max:Value:qk]' value='N' />
            <format attr='width' value='261' />
          </style-rule>
          <style-rule element='header'>
            <format attr='width' field='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]' value='596' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0ms0mev0vhknxx14yggaw07l98bd].[max:Value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series ID (dbt_world_indicators_marts_dimension_series.csv):nk] / [federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk])</rows>
        <cols />
      </table>
      <simple-id uuid='{014EAC9D-B6ED-4B77-A862-6F8750A5417F}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card param='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Year:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0ms0mev0vhknxx14yggaw07l98bd].[ctd:Value:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Country:nk]</field>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]</field>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{247DFC6D-2225-4CF9-A6FB-6DDFF69825A1}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Country:nk]</field>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series ID (dbt_world_indicators_marts_dimension_series.csv):nk]</field>
            <field>[federated.0ms0mev0vhknxx14yggaw07l98bd].[none:Series:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ECC4B749-0632-4BEB-BC71-BDEC21BC7288}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      jLD/BxMcuSoo0Y80AAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
